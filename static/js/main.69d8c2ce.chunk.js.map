{"version":3,"sources":["components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["QuizComponent","props","startQuiz","setState","start","quiz","complete","formValidation","options","document","getElementsByClassName","valid","optionindex","length","checked","optionchosen","increaseCounter","id","alert","data","state","counter","answer","score","getElementById","restartQuiz","className","this","Container","onClick","Navbar","variant","Brand","href","Toggle","Collapse","Text","question","type","name","for","a","b","c","d","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69d8c2ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport data from \"./questions/Questions.json\";\r\n\r\nimport { Navbar, Container } from 'react-bootstrap';\r\nimport './Quiz.css';\r\n\r\nclass QuizComponent extends Component {\r\n\r\n    // Stores each of the users prop\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            counter: 0,\r\n            score: 0,\r\n            start: true,\r\n            quiz: false,\r\n            complete: false\r\n        };\r\n    }\r\n\r\n    // Starts quiz\r\n    startQuiz = () => {\r\n        this.setState({\r\n            start: false,\r\n            quiz: true,\r\n            complete: false\r\n        });\r\n    }\r\n\r\n    // Validates that an answer has been given through the form\r\n    formValidation = () => {\r\n        var options = document.getElementsByClassName(\"option\");\r\n        var valid = false;\r\n        var optionindex = 0;\r\n\r\n        while (!valid && optionindex < options.length){\r\n            if (options[optionindex].checked){\r\n                var optionchosen = options[optionindex];\r\n                valid = true;\r\n            } else {\r\n                optionindex++;\r\n            }\r\n        }\r\n\r\n        if (!valid){\r\n            alert(\"Please submit an answer!\");\r\n        } else {\r\n            this.increaseCounter(optionchosen.id);\r\n        }\r\n    }\r\n\r\n    // Continue function\r\n    increaseCounter = (optionchosen) => {\r\n        if (optionchosen === data[this.state.counter].answer){\r\n            alert(\"correct\");\r\n            this.setState({\r\n                counter: this.state.counter + 1,\r\n                score: this.state.score + 1\r\n            });\r\n        } else {\r\n            alert(\"incorrect\");\r\n            this.setState({\r\n                counter: this.state.counter + 1\r\n            });\r\n        }\r\n\r\n        // Deselects option after each question\r\n        document.getElementById(optionchosen).checked = false;\r\n\r\n        // Catches last question and redirects\r\n        if (this.state.counter === data.length - 1){\r\n            this.setState({\r\n                quiz: false,\r\n                start: false,\r\n                complete: true\r\n            });\r\n        }\r\n    }\r\n\r\n    // Restart function\r\n    restartQuiz = () => {\r\n        this.setState({\r\n            counter: 0,\r\n            score: 0,\r\n            quiz: false,\r\n            complete: false,\r\n            start: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-container\">\r\n\r\n                {this.state.start ?\r\n                    <div className=\"screen-container\">\r\n                        <Container>\r\n                            <div className=\"screen-content\">\r\n                                <h1 className=\"screen-title\">Quiz App</h1>\r\n                                <p className=\"screen-text\">Quiz subject: <span className=\"score\">Pixar films</span></p>\r\n                                <button className=\"btn-screen\" onClick={this.startQuiz}>Start now</button>\r\n                            </div>\r\n                        </Container>\r\n                    </div>\r\n                : null}\r\n\r\n                {this.state.quiz ?\r\n                    <div>\r\n                        <div className=\"score-container\">\r\n                            <Navbar className=\"navbar\" variant=\"dark\">\r\n                                <Container>\r\n                                    <Navbar.Brand href=\"/react-quiz-app\" className=\"navbar-brand\">Quiz App</Navbar.Brand>\r\n                                    <Navbar.Toggle />\r\n                                    <Navbar.Collapse className=\"justify-content-end\">\r\n                                        <Navbar.Text className=\"score-top\"> Score: {this.state.score} </Navbar.Text>\r\n                                    </Navbar.Collapse>\r\n                                </Container>\r\n                            </Navbar>\r\n                        </div>\r\n                        <div className=\"question-container\">\r\n                            <Container>\r\n                                <h1 className=\"question-number\">Question {this.state.counter + 1}</h1>\r\n                                <h1 className=\"question\">{data[this.state.counter].question}</h1>\r\n                            </Container>\r\n                        </div>\r\n                        <div className=\"form-container\">\r\n                            <Container>\r\n                                <form className=\"form\">\r\n                                        {/* Answer Input A */}\r\n                                        <input type=\"radio\" id=\"a\" name=\"option\" className=\"option\"></input>\r\n                                        <label for=\"a\">{data[this.state.counter].a}</label><br></br>\r\n\r\n                                        {/* Answer Input B */}\r\n                                        <input type=\"radio\" id=\"b\" name=\"option\" className=\"option\"></input>\r\n                                        <label for=\"b\">{data[this.state.counter].b}</label><br></br>\r\n\r\n                                        {/* Answer Input C */}\r\n                                        <input type=\"radio\" id=\"c\" name=\"option\" className=\"option\"></input>\r\n                                        <label for=\"c\">{data[this.state.counter].c}</label><br></br>\r\n\r\n                                        {/* Answer Input D */}\r\n                                        <input type=\"radio\" id=\"d\" name=\"option\" className=\"option\"></input>\r\n                                        <label for=\"d\">{data[this.state.counter].d}</label><br></br>\r\n                                </form>\r\n                                <button className=\"btn-continue\" onClick={this.formValidation}>Continue</button>\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                : null}\r\n\r\n                {this.state.complete ?\r\n                    <div className=\"screen-container\">\r\n                        <Container>\r\n                            <div className=\"screen-content\">\r\n                                <h1 className=\"screen-title\">Quiz Complete</h1>\r\n                                <p className=\"screen-text\">Your final score: <span className=\"score\">{this.state.score}</span></p>\r\n                                <button className=\"btn-screen\" onClick={this.restartQuiz}>Restart</button>\r\n                            </div>\r\n                        </Container>\r\n                    </div>\r\n                : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizComponent;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport QuizComponent from './components/Quiz.js';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n\n        {/* Quiz */}\n        <Route path=\"/\">\n          <QuizComponent />\n        </Route>\n\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}